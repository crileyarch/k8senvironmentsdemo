<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="244ebd7b-0925-46ca-a3e5-283e37527688" created="2.5.0" activeEnvironment="qualityassurance" name="TestSimpleWarehouse" resourceRoot="" updated="2.5.0 2018-09-14T14:45:07Z" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="cbb16dd3-13c6-42ba-989d-13279ad82c20" name="Warehouse API" type="rest_ex" wadlVersion="https://swagger.io/openapiv3/specification" definitionUrl="file:/Users/criley/Work/Demos/k8senvironmentsdemo/SimpleWarehouseApp/src/main/resources/simplewarehouse.yaml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Simple example showing Amazon Warehouse API is meant to help third-party suppliers with supply chain management</con:description><con:settings/><con:definitionCache type="TEXT" rootPart="file:/Users/criley/Work/Demos/k8senvironmentsdemo/SimpleWarehouseApp/src/main/resources/simplewarehouse.yaml"><con:part><con:url>file:/Users/criley/Work/Demos/k8senvironmentsdemo/SimpleWarehouseApp/src/main/resources/simplewarehouse.yaml</con:url><con:content>openapi: 3.0.0
info:
  version: 'v1'
  title: 'Warehouse API'
  description: 'Simple example showing Amazon Warehouse API is meant to help third-party suppliers with supply chain management'
  termsOfService: 'http://www.acme.com/termsOfService.html'
  contact:
    name: 'Amazon API Support Team'
    url: 'http://api.acme.com/support.html'
    email: 'api@api.acme.com'
  license:
    name: 'Apache-2.0'
    url: 'http://www.apache.org/apache.html'
servers:
  - url: 'https://api.acme.com/{version}'
    description: 'Production endpoint'
    variables:
      version:
        default: 'v1'
  - url: 'https://testapi.acme.com/{version}'
    description: 'Test endpoint'
    variables:
      version:
        default: 'v2'
        enum: ['v1','v2']
paths:
  /warehouses/{warehouseId}:
    get:
      description: 'Get all inventory in warehouses'
      tags:
        - 'amazon warehouses'
      parameters:
        - $ref: '#/components/parameters/warehouseId'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/warehouse'
  /warehouses:
    post:
      description: 'Create inventory'
      tags:
        - 'amazon warehouses'
      requestBody:
        description: 'Inventory object'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/inventory'
      responses:
        201:
          description: 'Created'
components:
  schemas:
    warehouse:
      type: 'object'
      description: 'warehouse meta-data including location and inventory'
      properties:
        warehouseId:
          description: 'warehouse identifier that identifes its location'
          type: 'string'
        inventories:
          type: 'array'
          description: 'current inventory of items available in the warehouse'
          items:
            $ref: '#/components/schemas/inventory'
    inventory:
      type: 'object'
      description: 'a single inventory object'
      properties:
        sku:
          description: 'stock keeping unit'
          type: 'string'
        quantity:
          description: 'number of available inventory'
          type: 'integer'
        location:
          description: 'barcode location in the warehouse'
          type: 'string'
        warehouseId:
          description: 'warehouse identifier that SKU is located'
          type: 'integer'
  parameters:
    warehouseId:
      name: warehouseId
      description: 'identifier for warehouse'
      in: path
      required: true
      schema:
        type: integer
        enum: [10001,10002,10003]
</con:content><con:type>https://swagger.io/openapiv3/specification</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>https://api.acme.com/v1</con:endpoint><con:endpoint>https://testapi.acme.com/v2</con:endpoint></con:endpoints><con:resource name="/warehouses/{warehouseId}" path="/warehouses/{warehouseId}" id="0c7e6bd4-ba61-41f4-bcbd-eeb787201548"><con:settings/><con:parameters/><con:method name="GET" id="9cbf20b7-a7ab-4ede-8f1e-31e6fc47a827" method="GET"><con:description>Get all inventory in warehouses</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>warehouseId</con:name><con:style>TEMPLATE</con:style><con:description>identifier for warehouse</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:description>OK</con:description></con:representation><con:request name="Request 1" id="c98df63d-885a-4efe-825b-64186285656f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="warehouseId" value="123" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:resource name="/warehouses" path="/warehouses" id="144f7445-ed92-4422-bc36-0cca7df73eca"><con:settings/><con:parameters/><con:method name="POST" id="7370d079-f3cc-48c7-b5bc-4ac94eda1008" method="POST"><con:description>Create inventory</con:description><con:settings/><con:parameters/><con:request name="Request 1" id="90ecb9a5-7726-4a7c-9bd6-29431a3e6f81" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request>{
	"sku":"XXXX-XXX-XXXXX",
	"quantity":100,
	"warehouseId":10001,
	"location":"Fall River, MA"
	
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite id="907d6045-0236-4914-8046-0022f1908fae" name="SmokeTest"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="5422f269-f673-46a3-88c1-f1b1dfb3b46f" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="SimpleWarehouseTestCase" searchProperties="true" timeout="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="restrequest" name="GetWarehouse" id="218a7671-4d2b-40f8-a509-7836a3abefd7"><con:settings/><con:config service="Warehouse API" resourcePath="/warehouses/{warehouseId}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetWarehouse" id="c98df63d-885a-4efe-825b-64186285656f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://localhost/warehouses/10001</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="7e4e2aec-e07f-4eaf-9418-39c8587f06d5" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5a5d13e9-21b7-424f-970f-c71c582b28ae" name="JsonPath Match"><con:configuration><path>$['warehouseId']</path><content>10001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="warehouseId" value="10001" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PostWarehouse" id="a1bdae63-1828-45d4-85e2-9ad681506d4d"><con:settings/><con:config service="Warehouse API" resourcePath="/warehouses" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PostWarehouse" id="90ecb9a5-7726-4a7c-9bd6-29431a3e6f81" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request>{
	"sku":"XXXX-XXX-XXXXX",
	"quantity":100,
	"warehouseId":10001,
	"location":"Fall River, MA"
	
}</con:request><con:originalUri>http://localhost/warehouses</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="438ebe84-60a2-4704-ad0e-34f116c74cb9" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:savedRecentRuns>1</con:savedRecentRuns><con:properties/><con:wssContainer/><con:databaseConnectionContainer/><con:jmsConnectionContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:reporting><con:reportTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:parameters/><con:parameters/></con:reporting><con:reporting/><con:eventHandlers type="RequestFilter.filterRequest" name="RequestFilter.filterRequest"><con:script>// Sample event script to add custom HTTP header to all outgoing REST, SOAP and HTTP(S) calls
// This code is often used for adding custom authentication to SoapUI Pro tests

// If hardcoding the token, uncomment and change line 5
// def token = '4567'

// If your token is parameterized in Project level custom property, uncomment line 8
// def token = request.parent.testCase.testSuite.project.getProperty('auth_token').getValue()

// To modify all outgoing calls, remove comments from lines 11 to 16
// def headers = request.requestHeaders
// if (headers.containsKey('auth_token2') == false) {
//   headers.put('auth_token2', token)
//   request.requestHeaders = headers
// }</con:script></con:eventHandlers><con:eventHandlers type="TestRunListener.afterStep" name="TestRunListener.afterStep"><con:script>// Save all test step results into files
// Change the directory path in line 5 to a location where you want to store details
// then uncomment lines 5 to 10

// filePath = 'C:\\tempOutputDirectory\\'
// fos = new FileOutputStream(filePath + testStepResult.testStep.label + '.txt', true)
// pw = new PrintWriter(fos)
// testStepResult.writeTo(pw)
// pw.close()
// fos.close()</con:script></con:eventHandlers><con:environment id="a332ce3e-fb43-4373-aa1a-fd674506ad25" name="development"><con:service type="REST" name="Warehouse API"><con:endpoint authProfile="No Authorization" proxyHost="" proxyPort="" proxyUsername="" proxyPassword="">http://localhost:8080</con:endpoint></con:service><con:databaseConnectionContainer/><con:jmsConnectionContainer/></con:environment><con:environment id="45161cbe-1353-408f-b9e4-9d8b214c8fa7" name="qualityassurance"><con:service type="REST" name="Warehouse API"><con:endpoint authProfile="No Authorization" proxyHost="" proxyPort="" proxyUsername="" proxyPassword="">http://simplewarehouseapp-qualityassurance.127.0.0.1.nip.io</con:endpoint></con:service><con:databaseConnectionContainer/><con:jmsConnectionContainer/></con:environment><con:authRepository/><con:environmentSpec><con:entry environmentId="a332ce3e-fb43-4373-aa1a-fd674506ad25"><con:authProfile>No Authorization</con:authProfile></con:entry><con:entry environmentId="45161cbe-1353-408f-b9e4-9d8b214c8fa7"><con:authProfile>No Authorization</con:authProfile></con:entry></con:environmentSpec><con:tags/></con:soapui-project>